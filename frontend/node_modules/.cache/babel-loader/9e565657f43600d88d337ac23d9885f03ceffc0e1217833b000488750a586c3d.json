{"ast":null,"code":"var _jsxFileName = \"/app/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const token = localStorage.getItem('authToken');\n    const userData = localStorage.getItem('userData');\n    if (token && userData) {\n      try {\n        const parsedUser = JSON.parse(userData);\n        setUser(parsedUser);\n      } catch (error) {\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('userData');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      const {\n        token,\n        user: userData\n      } = response.data;\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('userData', JSON.stringify(userData));\n      setUser(userData);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Login failed'\n      };\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      const response = await api.post('/auth/register', {\n        name,\n        email,\n        password\n      });\n      const {\n        token,\n        user: userData\n      } = response.data;\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('userData', JSON.stringify(userData));\n      setUser(userData);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Registration failed'\n      };\n    }\n  };\n  const googleLogin = async credentialResponse => {\n    try {\n      const response = await api.post('/auth/google', {\n        credential: credentialResponse.credential\n      });\n      const {\n        token,\n        user: userData\n      } = response.data;\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('userData', JSON.stringify(userData));\n      setUser(userData);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || 'Google login failed'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userData');\n    setUser(null);\n  };\n  const value = {\n    user,\n    login,\n    register,\n    googleLogin,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","userData","parsedUser","JSON","parse","error","removeItem","login","email","password","response","post","data","setItem","stringify","success","_error$response","_error$response$data","detail","register","name","_error$response2","_error$response2$data","googleLogin","credentialResponse","credential","_error$response3","_error$response3$data","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/app/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../utils/api';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nconst AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const token = localStorage.getItem('authToken');\n    const userData = localStorage.getItem('userData');\n    \n    if (token && userData) {\n      try {\n        const parsedUser = JSON.parse(userData);\n        setUser(parsedUser);\n      } catch (error) {\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('userData');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', { email, password });\n      const { token, user: userData } = response.data;\n      \n      localStorage.setItem('authToken', token);\n      localStorage.setItem('userData', JSON.stringify(userData));\n      setUser(userData);\n      \n      return { success: true };\n    } catch (error) {\n      return { \n        success: false, \n        error: error.response?.data?.detail || 'Login failed' \n      };\n    }\n  };\n\n  const register = async (name, email, password) => {\n    try {\n      const response = await api.post('/auth/register', { name, email, password });\n      const { token, user: userData } = response.data;\n      \n      localStorage.setItem('authToken', token);\n      localStorage.setItem('userData', JSON.stringify(userData));\n      setUser(userData);\n      \n      return { success: true };\n    } catch (error) {\n      return { \n        success: false, \n        error: error.response?.data?.detail || 'Registration failed' \n      };\n    }\n  };\n\n  const googleLogin = async (credentialResponse) => {\n    try {\n      const response = await api.post('/auth/google', { \n        credential: credentialResponse.credential \n      });\n      const { token, user: userData } = response.data;\n      \n      localStorage.setItem('authToken', token);\n      localStorage.setItem('userData', JSON.stringify(userData));\n      setUser(userData);\n      \n      return { success: true };\n    } catch (error) {\n      return { \n        success: false, \n        error: error.response?.data?.detail || 'Google login failed' \n      };\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userData');\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    login,\n    register,\n    googleLogin,\n    logout,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}